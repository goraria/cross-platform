Initialize {

}

Base {
    language: JavaScript,
    database: MongoDB,
    environment: Node.js,
}

Technologies {
    client: [React, Redux, Material-UI, Axios]
    mobile: [React Native, Redux, Axios]
    server: [Node.js, Express, MongoDB, Mongoose, JWT, Nodemailer]
}

Features {
    client: [Login, Register, Profile, Home, Product, Cart, Order, Payment, Rating, Toast]
    mobile: [Login, Register, Profile, Home, Product, Cart, Order, Payment, Rating, Toast]
    server: [Login, Register, Profile, Home, Product, Cart, Order, Payment, Rating, Toast]
}

Routes {
    client: [Authentication, Home, UserModel, Account]
    mobile: [Authentication, Home, UserModel, Account]
    server: [Authentication, Home, UserModel, Account]
}

Environment {
    client: .env.local {
        REACT_APP_API: http://localhost:5000/apiNEXT_PUBLIC_API_BASE_URL=http://localhost:3003
    }
    server: .env {
        PORT=3003
        # 8080
        NODE_ENV=development
        MONGO_URL="mongodb+srv://goraria:990820@sandbox.6jc7m.mongodb.net/"
        MONGODB_URI="mongodb+srv://goraria:990820@sandbox.6jc7m.mongodb.net/"
    }
    template: {
        .env {
            REACY_APP_PUBLIC_API_BASE_URL=http://localhost:3000/api
            JWT_SECRET=GORTH
        }
        .env.local {
            VITE_PUBLIC_API_BASE_URL="http://localhost:8080"
        }
    }
}

Config {
    client: {
        package.json {
            "proxy": "http://localhost:5000"
        }
        tailwind.config.ts {
            content: [
                "./src/**/*.{js,jsx,ts,tsx}",
                "./public/index.html",
            ],
            theme: {
                extend: {},
            },
            plugins: [],
        }
    }
    server: {
        package.json {
            "proxy": "http://localhost:3003"
        }
        nodemon.json {
            "watch": ["."],
            "ext": "ts,json",
            "ignore": ["node_modules", "build", "dist", ".git", "src"],
            "exec": "ts-node -r tsconfig-paths/register app/index.ts"
        }
    }
}

Command {
    client: {
        start: "npm start",
        build: "npm run build",
        test: "npm test",
        eject: "npm run eject",
        lint: "npm run lint",
        format: "npm run format"
    }
    server: {
        start: "node app/index.js",
        dev: "nodemon app/index.js",
        build: "tsc -p tsconfig.json",
        test: "jest --watchAll --detectOpenHandles --forceExit --runInBand"
    }
}

