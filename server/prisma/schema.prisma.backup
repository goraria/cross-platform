generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("EXPRESS_DATABASE_URL")
  directUrl = env("EXPRESS_DIRECT_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model addresses {
  id                                           String   @id @default(uuid())
  user_id                                      String
  recipient_name                               String   @db.VarChar(100)
  recipient_phone                              String   @db.VarChar(20)
  street_address                               String
  ward                                         String?  @db.VarChar(100)
  district                                     String   @db.VarChar(100)
  city                                         String   @db.VarChar(100)
  country                                      String   @default("Vietnam") @db.VarChar(100)
  is_default_shipping                          Boolean  @default(false)
  is_default_billing                           Boolean  @default(false)
  created_at                                   DateTime @default(now()) @db.Timestamptz(6)
  updated_at                                   DateTime @default(now()) @db.Timestamptz(6)
  users                                        users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders_orders_billing_address_idToaddresses  orders[] @relation("orders_billing_address_idToaddresses")
  orders_orders_shipping_address_idToaddresses orders[] @relation("orders_shipping_address_idToaddresses")

  @@index([user_id], map: "idx_addresses_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model affiliate_stats {
  id                  String                @id @default(uuid())
  affiliate_user_id   String
  associated_order_id String?               @unique
  commission_amount   Decimal?              @db.Decimal(10, 2)
  click_source        String?
  ip_address          String?               @db.VarChar(45)
  status              affiliate_status_enum @default(Pending)
  created_at          DateTime              @default(now()) @db.Timestamptz(6)
  users               users                 @relation(fields: [affiliate_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  orders              orders?               @relation(fields: [associated_order_id], references: [id], onUpdate: NoAction)

  @@index([affiliate_user_id], map: "idx_affiliate_stats_affiliate_user_id")
  @@index([associated_order_id], map: "idx_affiliate_stats_associated_order_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model cart_items {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  product_id BigInt
  quantity   Int
  added_at   DateTime @default(now()) @db.Timestamptz(6)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, product_id])
  @@index([user_id], map: "idx_cart_items_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model categories {
  id                 Int                  @id @default(autoincrement())
  parent_category_id Int?
  name               String               @db.VarChar(100)
  slug               String               @unique @db.VarChar(120)
  description        String?
  categories         categories?          @relation("categoriesTocategories", fields: [parent_category_id], references: [id], onUpdate: NoAction)
  other_categories   categories[]         @relation("categoriesTocategories")
  post_categories    post_categories[]
  product_categories product_categories[]

  @@index([parent_category_id], map: "idx_categories_parent_category_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model comments {
  id                String    @id @default(uuid()) @map("id")
  post_id           String    @map("post_id")
  user_id           String    @map("user_id")
  content           String    @map("content")
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @updatedAt @map("updated_at")
  post              posts     @relation(fields: [post_id], references: [id], onDelete: Cascade) @map("post")
  user              users     @relation(fields: [user_id], references: [id], onDelete: Cascade) @map("user")

  @@index([post_id], map: "idx_comments_post_id")
  @@index([user_id], map: "idx_comments_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model conversation_participants {
  conversation_id      BigInt
  user_id              BigInt
  joined_at            DateTime      @default(now()) @db.Timestamptz(6)
  last_read_message_id BigInt?
  conversations        conversations @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages             messages?     @relation(fields: [last_read_message_id], references: [id], onUpdate: NoAction)
  users                users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([conversation_id, user_id])
  @@index([last_read_message_id], map: "idx_conversation_participants_last_read")
  @@index([user_id], map: "idx_conversation_participants_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model conversations {
  id                                               BigInt                      @id @default(autoincrement())
  name                                             String?                     @db.VarChar(100)
  type                                             conversation_type_enum      @default(Private)
  creator_id                                       BigInt?
  last_message_id                                  BigInt?
  created_at                                       DateTime                    @default(now()) @db.Timestamptz(6)
  updated_at                                       DateTime                    @default(now()) @db.Timestamptz(6)
  conversation_participants                        conversation_participants[]
  users                                            users?                      @relation(fields: [creator_id], references: [id], onUpdate: NoAction)
  messages_conversations_last_message_idTomessages messages?                   @relation("conversations_last_message_idTomessages", fields: [last_message_id], references: [id], onUpdate: NoAction, map: "fk_conversations_last_message")
  messages_messages_conversation_idToconversations messages[]                  @relation("messages_conversation_idToconversations")

  @@index([creator_id], map: "idx_conversations_creator_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model follows {
  id                String    @id @default(uuid()) @map("id")
  follower_id       String    @map("follower_id")
  following_id      String    @map("following_id")
  created_at        DateTime  @default(now()) @map("created_at")
  follower          users     @relation("follows_follower_idTousers", fields: [follower_id], references: [id], onDelete: Cascade) @map("follower")
  following         users     @relation("follows_following_idTousers", fields: [following_id], references: [id], onDelete: Cascade) @map("following")

  @@unique([follower_id, following_id], map: "uq_follows_follower_following")
  @@index([follower_id], map: "idx_follows_follower_id")
  @@index([following_id], map: "idx_follows_following_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model likes {
  id          BigInt                @id @default(autoincrement())
  user_id     BigInt
  target_type like_target_type_enum
  target_id   BigInt
  created_at  DateTime              @default(now()) @db.Timestamptz(6)
  users       users                 @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, target_type, target_id])
  @@index([target_type, target_id], map: "idx_likes_target")
  @@index([user_id], map: "idx_likes_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model messages {
  id                                                    BigInt                      @id @default(autoincrement())
  conversation_id                                       BigInt
  sender_id                                             BigInt
  content                                               String
  message_type                                          message_type_enum           @default(Text)
  created_at                                            DateTime                    @default(now()) @db.Timestamptz(6)
  conversation_participants                             conversation_participants[]
  conversations_conversations_last_message_idTomessages conversations[]             @relation("conversations_last_message_idTomessages")
  conversations_messages_conversation_idToconversations conversations               @relation("messages_conversation_idToconversations", fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                                                 users                       @relation(fields: [sender_id], references: [id], onUpdate: NoAction)

  @@index([conversation_id], map: "idx_messages_conversation_id")
  @@index([sender_id], map: "idx_messages_sender_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model notifications {
  id                String    @id @default(uuid()) @map("id")
  recipient_id      String    @map("recipient_id")
  actor_id          String?   @map("actor_id")
  type              notification_type_enum @map("type")
  content           String    @map("content")
  is_read           Boolean   @default(false) @map("is_read")
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @updatedAt @map("updated_at")
  recipient         users     @relation("notifications_recipient_idTousers", fields: [recipient_id], references: [id], onDelete: Cascade) @map("recipient")
  actor             users?    @relation("notifications_actor_idTousers", fields: [actor_id], references: [id]) @map("actor")

  @@index([recipient_id], map: "idx_notifications_recipient_id")
  @@index([actor_id], map: "idx_notifications_actor_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model order_items {
  id                String    @id @default(uuid()) @map("id")
  order_id          String    @map("order_id")
  menu_item_id      String    @map("menu_item_id")
  quantity          Int       @map("quantity")
  price             Float     @map("price")
  order             orders    @relation(fields: [order_id], references: [id], onDelete: Cascade) @map("order")
  menu_item         menu_items @relation(fields: [menu_item_id], references: [id], onDelete: Cascade) @map("menu_item")

  @@index([order_id], map: "idx_order_items_order_id")
  @@index([menu_item_id], map: "idx_order_items_menu_item_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model order_status_history {
  id                 BigInt            @id @default(autoincrement())
  order_id           BigInt
  status             order_status_enum
  changed_by_user_id BigInt?
  notes              String?
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  users              users?            @relation(fields: [changed_by_user_id], references: [id], onUpdate: NoAction)
  orders             orders            @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([order_id], map: "idx_order_status_history_order_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model orders {
  id                String    @id @default(uuid()) @map("id")
  user_id           String    @map("user_id")
  restaurant_id     String    @map("restaurant_id")
  affiliate_user_id String?   @map("affiliate_user_id")
  delivery_person_id String?  @map("delivery_person_id")
  status            order_status_enum @default(PENDING) @map("status")
  total_price       Float     @map("total_price")
  payment_id        String?   @map("payment_id")
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @updatedAt @map("updated_at")
  delivered_at      DateTime? @map("delivered_at")
  cancelled_at      DateTime? @map("cancelled_at")
  user              users     @relation(fields: [user_id], references: [id], onDelete: Cascade) @map("user")
  restaurant        restaurants @relation(fields: [restaurant_id], references: [id], onDelete: Cascade) @map("restaurant")
  affiliate_user    users?    @relation("orders_affiliate_user_idTousers", fields: [affiliate_user_id], references: [id]) @map("affiliate_user")
  delivery_person   users?    @relation("orders_delivery_person_idTousers", fields: [delivery_person_id], references: [id]) @map("delivery_person")
  payment           payments? @relation(fields: [payment_id], references: [id]) @map("payment")
  order_items       order_items[] @map("order_items")
  order_status_history order_status_history[] @map("order_status_history")
  reviews           reviews[] @map("reviews")
  blockchain_logs   blockchain_logs[] @map("blockchain_logs")

  @@index([user_id], map: "idx_orders_user_id")
  @@index([restaurant_id], map: "idx_orders_restaurant_id")
  @@index([affiliate_user_id], map: "idx_orders_affiliate_user_id")
  @@index([delivery_person_id], map: "idx_orders_delivery_person_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model post_categories {
  post_id     BigInt
  category_id Int
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  posts       posts      @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, category_id])
  @@index([category_id], map: "idx_post_categories_category_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model post_tags {
  post_id BigInt
  tag_id  Int
  posts   posts  @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags    tags   @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, tag_id])
  @@index([tag_id], map: "idx_post_tags_tag_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model blogs {
  id                String    @id @default(uuid()) @map("id")
  title             String    @map("title")
  description       String?   @map("description")
  author_id         String    @map("author_id")
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @updatedAt @map("updated_at")
  author            users     @relation(fields: [author_id], references: [id], onDelete: Cascade) @map("author")
  posts             posts[]   @map("posts")

  @@index([author_id], map: "idx_blogs_author_id")
}

model posts {
  id                String    @id @default(uuid()) @map("id")
  blog_id           String    @map("blog_id")
  author_id         String    @map("author_id")
  title             String    @map("title")
  content           String    @map("content")
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @updatedAt @map("updated_at")
  blog              blogs     @relation(fields: [blog_id], references: [id], onDelete: Cascade) @map("blog")
  author            users     @relation(fields: [author_id], references: [id], onDelete: Cascade) @map("author")
  comments          comments[] @map("comments")

  @@index([blog_id], map: "idx_posts_blog_id")
  @@index([author_id], map: "idx_posts_author_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_categories {
  product_id  BigInt
  category_id Int
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products    products   @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, category_id])
  @@index([category_id], map: "idx_product_categories_category_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_images {
  id            BigInt   @id @default(autoincrement())
  product_id    BigInt
  image_url     String
  alt_text      String?  @db.VarChar(255)
  display_order Int      @default(0)
  products      products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([product_id], map: "idx_product_images_product_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model product_tags {
  product_id BigInt
  tag_id     Int
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags       tags     @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([product_id, tag_id])
  @@index([tag_id], map: "idx_product_tags_tag_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model products {
  id                 BigInt               @id @default(autoincrement())
  seller_id          BigInt
  name               String               @db.VarChar(255)
  description        String?
  sku                String?              @unique @db.VarChar(100)
  price              Decimal              @db.Decimal(12, 2)
  stock_quantity     Int                  @default(0)
  thumbnail_url      String?
  is_published       Boolean              @default(false)
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  updated_at         DateTime             @default(now()) @db.Timestamptz(6)
  cart_items         cart_items[]
  order_items        order_items[]
  product_categories product_categories[]
  product_images     product_images[]
  product_tags       product_tags[]
  users              users                @relation(fields: [seller_id], references: [id], onUpdate: NoAction)

  @@index([name], map: "idx_products_name")
  @@index([seller_id], map: "idx_products_seller_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model projects {
  id          BigInt   @id @default(autoincrement())
  name        String   @db.VarChar(255)
  description String?
  owner_id    BigInt
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  users       users    @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
  tasks       tasks[]

  @@index([owner_id], map: "idx_projects_owner_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model roles {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(50)
  description String?
  user_roles  user_roles[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tags {
  id           Int            @id @default(autoincrement())
  name         String         @unique @db.VarChar(50)
  slug         String         @unique @db.VarChar(60)
  post_tags    post_tags[]
  product_tags product_tags[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model task_assignments {
  task_id BigInt
  user_id BigInt
  tasks   tasks  @relation(fields: [task_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([task_id, user_id])
  @@index([user_id], map: "idx_task_assignments_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model tasks {
  id                String    @id @default(uuid()) @map("id")
  title             String    @map("title")
  description       String?   @map("description")
  status            task_status_enum @default(PENDING) @map("status")
  creator_id        String    @map("creator_id")
  assignee_id       String?   @map("assignee_id")
  due_date          DateTime? @map("due_date")
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @updatedAt @map("updated_at")
  creator           users     @relation("tasks_creator_idTousers", fields: [creator_id], references: [id], onDelete: Cascade) @map("creator")
  assignee          users?    @relation("tasks_assignee_idTousers", fields: [assignee_id], references: [id]) @map("assignee")
  task_assignments  task_assignments[] @map("task_assignments")

  @@index([creator_id], map: "idx_tasks_creator_id")
  @@index([assignee_id], map: "idx_tasks_assignee_id")
}

enum task_status_enum {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_roles {
  user_id BigInt
  role_id Int
  roles   roles  @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
  @@index([role_id], map: "idx_user_roles_role_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                String    @id @default(uuid()) @map("id")
  username          String    @unique @map("username")
  email             String    @unique @map("email")
  password_hash     String    @map("password_hash")
  first_name        String    @map("first_name")
  last_name         String    @map("last_name")
  role              user_role_enum  @default(USER) @map("role")
  status            user_status_enum @default(ACTIVE) @map("status")
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @updatedAt @map("updated_at")
  last_login_at     DateTime? @map("last_login_at")
  user_profiles     user_profiles? @map("user_profiles")
  sessions          sessions[] @map("sessions")
  courses           courses[] @map("courses")
  enrollments       enrollments[] @map("enrollments")
  progress          progress[] @map("progress")
  course_payments   course_payments[] @map("course_payments")
  subscriptions     subscriptions[] @map("subscriptions")
  ai_interactions   ai_interactions[] @map("ai_interactions")
  user_analytics    user_analytics[] @map("user_analytics")
  addresses         addresses[] @map("addresses")
  affiliate_stats   affiliate_stats[] @map("affiliate_stats")
  cart_items        cart_items[] @map("cart_items")
  comments          comments[] @map("comments")
  conversation_participants conversation_participants[] @map("conversation_participants")
  conversations     conversations[] @map("conversations")
  follows_follows_follower_idTousers follows[] @relation("follows_follower_idTousers") @map("follows_follows_follower_idTousers")
  follows_follows_following_idTousers follows[] @relation("follows_following_idTousers") @map("follows_follows_following_idTousers")
  likes             likes[] @map("likes")
  messages          messages[] @map("messages")
  notifications_notifications_actor_idTousers notifications[] @relation("notifications_actor_idTousers") @map("notifications_notifications_actor_idTousers")
  notifications_notifications_recipient_idTousers notifications[] @relation("notifications_recipient_idTousers") @map("notifications_notifications_recipient_idTousers")
  order_status_history order_status_history[] @map("order_status_history")
  orders_orders_affiliate_user_idTousers orders[] @relation("orders_affiliate_user_idTousers") @map("orders_orders_affiliate_user_idTousers")
  orders_orders_delivery_person_idTousers orders[] @relation("orders_delivery_person_idTousers") @map("orders_orders_delivery_person_idTousers")
  orders_orders_user_idTousers orders[] @relation("orders_user_idTousers") @map("orders_orders_user_idTousers")
  posts             posts[] @map("posts")
  products          products[] @map("products")
  projects          projects[] @map("projects")
  task_assignments  task_assignments[] @map("task_assignments")
  tasks_tasks_assignee_idTousers tasks[] @relation("tasks_assignee_idTousers") @map("tasks_tasks_assignee_idTousers")
  tasks_tasks_creator_idTousers tasks[] @relation("tasks_creator_idTousers") @map("tasks_tasks_creator_idTousers")
  user_roles        user_roles[] @map("user_roles")

  @@index([email], map: "idx_users_email")
  @@index([username], map: "idx_users_username")
}

model user_profiles {
  id                String    @id @default(uuid()) @map("id")
  user_id           String    @unique @map("user_id")
  user              users     @relation(fields: [user_id], references: [id], onDelete: Cascade) @map("user")
  avatar            String?   @map("avatar")
  bio               String?   @map("bio")
  phone             String?   @map("phone")
  address           String?   @map("address")
  preferences       Json?     @map("preferences")
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @updatedAt @map("updated_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model restaurant_chains {
  id                String    @id @default(uuid())
  name              String    @db.VarChar(255)
  description       String?
  logo_url          String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  restaurants       restaurants[]
}

model restaurants {
  id                  String    @id @default(uuid())
  chain_id            String?
  name                String    @db.VarChar(255)
  address             String
  phone               String?
  email               String?
  latitude            Float?
  longitude           Float?
  opening_hours       String?
  status              restaurant_status_enum @default(active)
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  restaurant_chains   restaurant_chains? @relation(fields: [chain_id], references: [id], onDelete: Cascade)
  menu_items          menu_items[]
  orders              orders[]
  staff               users[]

  @@index([chain_id], map: "idx_restaurants_chain_id")
}

model menu_items {
  id              String    @id @default(uuid())
  restaurant_id   String
  name            String    @db.VarChar(255)
  description     String?
  price           Decimal   @db.Decimal(12, 2)
  image_url       String?
  is_available    Boolean   @default(true)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  restaurants     restaurants @relation(fields: [restaurant_id], references: [id], onDelete: Cascade)
  order_items     order_items[]

  @@index([restaurant_id], map: "idx_menu_items_restaurant_id")
}

model payments {
  id                String    @id @default(uuid())
  order_id          BigInt
  user_id           String
  amount            Decimal   @db.Decimal(14, 2)
  currency          String    @default("VND")
  status            payment_status_enum @default(pending)
  method            payment_method_enum
  transaction_id    String?
  provider_payload  Json?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}

model blockchain_logs {
  id                String    @id @default(uuid())
  action            String
  data_hash         String
  tx_hash           String?
  chain             String
  status            blockchain_status_enum @default(pending)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  user_id           String?
  users             users?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
}

model wallets {
  id                String    @id @default(uuid()) @map("id")
  user_id           String    @map("user_id")
  type              wallet_type_enum @map("type")
  address           String    @map("address")
  balance           Float     @default(0) @map("balance")
  currency          String    @map("currency")
  is_active         Boolean   @default(true) @map("is_active")
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @updatedAt @map("updated_at")
  user              users     @relation(fields: [user_id], references: [id], onDelete: Cascade) @map("user")
  payments          payments[] @map("payments")
  blockchain_logs   blockchain_logs[] @map("blockchain_logs")

  @@index([user_id], map: "idx_wallets_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model reviews {
  id                String    @id @default(uuid()) @map("id")
  user_id           String    @map("user_id")
  restaurant_id     String    @map("restaurant_id")
  order_id          String?   @map("order_id")
  rating            Int       @map("rating")
  comment           String?   @map("comment")
  created_at        DateTime  @default(now()) @map("created_at")
  updated_at        DateTime  @updatedAt @map("updated_at")
  user              users     @relation(fields: [user_id], references: [id], onDelete: Cascade) @map("user")
  restaurant        restaurants @relation(fields: [restaurant_id], references: [id], onDelete: Cascade) @map("restaurant")
  order             orders?   @relation(fields: [order_id], references: [id]) @map("order")

  @@index([user_id], map: "idx_reviews_user_id")
  @@index([restaurant_id], map: "idx_reviews_restaurant_id")
  @@index([order_id], map: "idx_reviews_order_id")
}

// --- ENUMS (snake_case, mapped) ---
enum affiliate_status_enum {
  Pending
  Approved
  Rejected
  Paid
}

enum comment_parent_type_enum {
  Post
  Product
  Task
}

enum conversation_type_enum {
  Private
  Group
}

enum like_target_type_enum {
  Post
  Comment
  Product
}

enum message_type_enum {
  Text
  Image
  File
  System
}

enum order_status_enum {
  PENDING
  CONFIRMED
  PREPARING
  DELIVERING
  DELIVERED
  CANCELLED
  FAILED
}

enum payment_status_enum {
  Pending
  Paid
  Failed
  Refunded
}

enum post_type_enum {
  Social
  Blog
}

enum task_priority_enum {
  Low
  Medium
  High
  Urgent
}

enum task_status_enum {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum visibility_enum {
  Public
  Followers
  Private
}

enum user_role_enum {
  USER
  ADMIN
  MANAGER
  STAFF
}

enum user_status_enum {
  ACTIVE
  INACTIVE
  BANNED
  PENDING
}

enum course_status_enum {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum course_level_enum {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum enrollment_status_enum {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum progress_status_enum {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum subscription_plan_enum {
  FREE
  BASIC
  PREMIUM
}

enum subscription_status_enum {
  ACTIVE
  CANCELLED
  EXPIRED
}

enum ai_interaction_type_enum {
  CHAT
  QUIZ
  EXERCISE
  FEEDBACK
}

enum ai_interaction_status_enum {
  PENDING
  COMPLETED
  FAILED
}

enum restaurant_status_enum {
  active
  inactive
  suspended
}

enum payment_method_enum {
  paypal
  momo
  zalopay
  vnpay
  cash
  card
  crypto
}

enum blockchain_status_enum {
  pending
  confirmed
  failed
}

enum wallet_type_enum {
  internal
  paypal
  momo
  zalopay
  vnpay
  crypto
}

enum notification_type_enum {
  ORDER
  TASK
  BLOG
  SYSTEM
  WALLET
  BLOCKCHAIN
}
